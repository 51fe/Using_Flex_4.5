<?xml version="1.0"?>
<!-- olapdatagrid/OLAPDG_RegionMonthSliceFlex.mxml -->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:mx="library://ns.adobe.com/flex/mx" 
    xmlns:s="library://ns.adobe.com/flex/spark"
        creationComplete="creationCompleteHandler();">

    <fx:Script>
      <![CDATA[
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.olap.OLAPQuery;
        import mx.olap.OLAPSet;
        import mx.olap.IOLAPQuery;
        import mx.olap.IOLAPElement
        import mx.olap.IOLAPQueryAxis;
        import mx.olap.IOLAPCube;
        import mx.olap.IOLAPMember
        import mx.olap.OLAPResult;
        import mx.events.CubeEvent;
        import mx.controls.Alert;
        import mx.collections.ArrayCollection;
        
        include "data.as"

        private function creationCompleteHandler():void {
            myMXMLCube.refresh();
        }

        private function getQuery(cube:IOLAPCube):IOLAPQuery {
            // Create an instance of OLAPQuery to represent the query. 
            var query:OLAPQuery = new OLAPQuery;
            
            // Get the row axis from the query instance.
            var rowQueryAxis:IOLAPQueryAxis = 
                query.getAxis(OLAPQuery.ROW_AXIS);
            // Create an OLAPSet instance to configure the axis.
            var productSet:OLAPSet = new OLAPSet;
            productSet.addElements(cube.findDimension("GeographyDim").findAttribute("Region").children);
            rowQueryAxis.addSet(productSet);
            
            var colQueryAxis:IOLAPQueryAxis = 
                query.getAxis(OLAPQuery.COLUMN_AXIS);         
            var quarterSet:OLAPSet= new OLAPSet;
            quarterSet.addElements(cube.findDimension("TimeDim").findAttribute("Month").children);
            colQueryAxis.addSet(quarterSet);
                       
            // Create the slicer axis. 
            var slicerQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.SLICER_AXIS);         
            // Create an OLAPSet instance to configure the axis.
            var flexSet:OLAPSet= new OLAPSet;
            flexSet.addElement(IOLAPElement(cube.findDimension("ProductDim").findHierarchy("ProductHier").findLevel("Product").findMember("Flex").getItemAt(0)));
            slicerQueryAxis.addSet(flexSet);
            
            return query;       
        }

        private function runQuery(event:CubeEvent):void {
            // Get cube.
            var cube:IOLAPCube = IOLAPCube(event.currentTarget);
            // Create a query instance.
            var query:IOLAPQuery = getQuery(cube);
            // Execute the query.
            var token:AsyncToken = cube.execute(query);
            // Set up handlers for the query results.
            token.addResponder(new AsyncResponder(showResult, showFault));
        }
        
        private function showFault(error:FaultEvent, token:Object):void {
            Alert.show(error.fault.faultString);
        }

        private function showResult(result:Object, token:Object):void {
            if (!result) {
                Alert.show("No results from query.");
                return;
            }
            myOLAPDG.dataProvider= result as OLAPResult;            
        }        
      ]]>
    </fx:Script>

    <fx:Declarations>
        <mx:OLAPCube name="FlatSchemaCube" 
            dataProvider="{flatData}" 
            id="myMXMLCube"
            complete="runQuery(event);">
 
            <mx:OLAPDimension name="CustomerDim">
                <mx:OLAPAttribute name="Customer" dataField="customer"/>
                <mx:OLAPHierarchy name="CustomerHier" 
                    hasAll="true">
                    <mx:OLAPLevel attributeName="Customer"/>
                </mx:OLAPHierarchy>
            </mx:OLAPDimension>
    
            <mx:OLAPDimension name="ProductDim">
                <mx:OLAPAttribute name="Product" dataField="product"/>
                <mx:OLAPHierarchy name="ProductHier" 
                    hasAll="true">
                    <mx:OLAPLevel attributeName="Product"/>
                </mx:OLAPHierarchy>
            </mx:OLAPDimension>

            <mx:OLAPDimension name="TimeDim">
                <mx:OLAPAttribute name="Year" dataField="year"/>
                <mx:OLAPAttribute name="Quarter" dataField="quarter"/>
                <mx:OLAPAttribute name="Month" dataField="month"/>
                <mx:OLAPHierarchy name="Time-Period" 
                    hasAll="true">
                    <mx:OLAPLevel attributeName="Year"/>
                    <mx:OLAPLevel attributeName="Quarter"/>
                    <mx:OLAPLevel attributeName="Month"/>
                </mx:OLAPHierarchy> 
            </mx:OLAPDimension>

            <mx:OLAPDimension name="GeographyDim">  
                <mx:OLAPAttribute name="Country" dataField="country"/>
                <mx:OLAPAttribute name="Region" dataField="region"/>
                <mx:OLAPAttribute name="State" dataField="state"/>
                <mx:OLAPHierarchy name="Country-Region-State" 
                    hasAll="true">
                    <mx:OLAPLevel attributeName="Country"/>
                    <mx:OLAPLevel attributeName="Region"/>
                    <mx:OLAPLevel attributeName="State"/>
                </mx:OLAPHierarchy> 
            </mx:OLAPDimension>

            <mx:OLAPMeasure name="Revenue" 
                dataField="revenue" 
                aggregator="SUM"/>
            <mx:OLAPMeasure name="Cost" 
                dataField="cost" 
                aggregator="SUM"/>
        </mx:OLAPCube>
    </fx:Declarations>
    
    <mx:OLAPDataGrid id="myOLAPDG" width="100%" height="100%" />
</s:Application>