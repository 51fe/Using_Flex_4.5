<?xml version="1.0" ?> 
<!--  charts/MakeChartFromDragDrop.mxml --> 
<s:Application 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:mx="library://ns.adobe.com/flex/mx" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    creationComplete="srv.send();initApp();"
    height="600">
     
    <fx:Declarations>
        <!-- View source of the following page to see the structure of the data that Flex uses in this example. -->
        <mx:HTTPService id="srv" url="http://aspexamples.adobe.com/chart_examples/expenses-xml.aspx" result="resultHandler()"/>
        <!-- To see data in an HTML table, go to http://aspexamples.adobe.com/chart_examples/expenses.aspx -->  

        <mx:SeriesInterpolate id="interpol" 
            duration="1000" 
            elementOffset="0" 
            minimumElementDuration="200"
        />

    </fx:Declarations>

    <fx:Script>
    <![CDATA[ 
        import mx.collections.ArrayCollection;
        import mx.charts.chartClasses.ChartBase;
        import mx.charts.ChartItem;
        import mx.charts.PieChart;
        import mx.charts.series.PieSeries;
        import mx.charts.events.ChartItemEvent;
        import mx.events.DragEvent;
        import mx.controls.List;
        import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.charts.Legend;

        [Bindable]
        public var newDataProviderAC:ArrayCollection;
        
        [Bindable]
        private var expensesAC:ArrayCollection;
        
        private function initApp():void {
            setupPieChart();
        }

        private function resultHandler():void {
               expensesAC = ArrayCollection(srv.lastResult.data.result);
        }
        
        private var newChart:PieChart;
        private var newSeries:PieSeries;
        
        [Bindable]
        private var explodedPiece:Array;

        private function explodePiece(e:Event):void {
            explodedPiece = new Array();           
            explodedPiece[newSeries.selectedIndex] = .2;
            newSeries.perWedgeExplodeRadius = explodedPiece;
        }

        private function setupPieChart():void {     
            newChart  = new PieChart();
            newChart.showDataTips = true;            
            newChart.selectionMode = "multiple";
            newChart.dropEnabled= true;
            newChart.dragEnabled= false;
            
            newChart.height = 350;
            newChart.width = 350;
            
            newChart.addEventListener("dragEnter", doDragEnter);
            newChart.addEventListener("dragDrop", doDragDrop);

            newChart.dataProvider = newDataProviderAC;

            newSeries = new PieSeries();
            newSeries.field = "expenses";
            newSeries.nameField = "month";
            newSeries.setStyle("labelPosition", "callout");
            newSeries.setStyle("showDataEffect", "interpol");

            var newSeriesArray:Array = new Array();
            newSeriesArray.push(newSeries);
            newChart.series = newSeriesArray;

            newChart.addEventListener(ChartItemEvent.CHANGE, explodePiece);

            // Create a legend for the new chart.
            var newLegend:Legend = new Legend();
            newLegend.dataProvider = newChart;

            p2.addElement(newChart);
            p2.addElement(newLegend);
        }

        private function doDragEnter(event:DragEvent):void {
            // Get a reference to the target chart.
            var dragTarget:ChartBase = ChartBase(event.currentTarget);

            // Register the target chart with the DragManager.
            DragManager.acceptDragDrop(dragTarget);
        }

        private function doDragDrop(event:DragEvent):void {
            // Get a reference to the target chart.
            var dropTarget:ChartBase=ChartBase(event.currentTarget);

            // Get the dragged items from the drag initiator. When getting 
            // items from chart controls, you must use the 'chartitems' 
            // format.
            var items:Array = event.dragSource.dataForFormat("chartitems") 
                as Array;

            // Trace status messages.
            trace("length: " + String(items.length));
            trace("format: " + String(event.dragSource.formats[0]));
    
            // Add each item to the drop target's data provider.
            for(var i:uint=0; i < items.length; i++) {
                
                // If the target data provider already contains the
                // item, then do nothing.
                if (dropTarget.dataProvider.contains(items[i].item)) {
                
                // If the target data provider does NOT already
                // contain the item, then add it.
                } else {
                    dropTarget.dataProvider.addItem(items[i].item);                
                }                
            }
        }
    ]]> 
    </fx:Script>   

    <s:layout>
        <s:VerticalLayout/>
    </s:layout>

    <s:Panel id="p1" title="Source Chart" height="250" width="400">
        <s:layout>
            <s:VerticalLayout/>
        </s:layout>
        <mx:ColumnChart id="myColumnChart" 
            height="207" 
            width="350" 
            showDataTips="true" 
            dataProvider="{srv.lastResult.data.result}" 
            selectionMode="multiple"
            dragEnabled="true" 
            dropEnabled="false">
            <mx:series>
                <mx:ColumnSeries id="series1" 
                    yField="expenses" 
                    displayName="Expenses" 
                    selectable="true"/> 
            </mx:series>            
            <mx:horizontalAxis>
                <mx:CategoryAxis categoryField="month"/>
            </mx:horizontalAxis>                        
        </mx:ColumnChart>
    </s:Panel>
    
    <!-- This will be the parent of the soon-to-be created chart. -->
    <s:Panel id="p2" title="Target Chart" height="400" width="400">
        <s:layout>
            <s:VerticalLayout/>
        </s:layout>
    </s:Panel>
</s:Application>